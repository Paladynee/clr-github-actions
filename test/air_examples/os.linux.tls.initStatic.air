# Begin Function AIR: os.linux.tls.initStatic:
# Total AIR+Liveness bytes: 3.3564453125KiB
# AIR Instructions:         161 (1.4150390625KiB)
# AIR Extra Data:           355 (1.38671875KiB)
# Liveness tomb_bits:       88B
# Liveness Extra Data:      50 (200B)
# Liveness special table:   22 (176B)
  %0 = arg([]elf.Elf64_Phdr, "phdrs")
  %1!= dbg_stmt(5:20)
  %2!= call(<fn ([]elf.Elf64_Phdr) void, (function 'computeAreaDesc')>, [%0!])
  %3!= dbg_stmt(7:5)
  %4 = block([]u8, {
    %5!= dbg_stmt(10:13)
    %6!= block(void, {
      %7 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
      %8!= dbg_stmt(10:22)
      %9 = struct_field_val(%7!, 1)
      %10!= dbg_stmt(10:39)
      %11 = bitcast(u64, %9!)
      %12 = cmp_lte(%11!, <u64, 4096>)
      %13 = block(bool, {
        %23!= cond_br(%12!, poi {
          %15 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
          %16!= dbg_stmt(10:63)
          %17 = struct_field_val(%15!, 0)
          %18!= load([8448]u8, <*align(4096) [8448]u8, os.linux.tls.main_thread_area_buffer>)
          %19!= dbg_stmt(10:95)
          %20 = bitcast(u64, %17!)
          %21 = cmp_lte(%20!, <u64, 8448>)
          %22!= br(%13, %21!)
        }, poi {
          %14!= br(%13, @Air.Inst.Ref.bool_false)
        })
      } %12!)
      %32!= cond_br(%13!, poi {
        %24!= dbg_stmt(11:13)
        %25 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
        %26!= dbg_stmt(11:60)
        %27 = struct_field_val(%25!, 0)
        %28!= dbg_stmt(11:47)
        %29 = slice([]align(4096) u8, <[*]align(4096) u8, @as([*]align(4096) u8, @ptrCast(os.linux.tls.main_thread_area_buffer[0]))>, %27!)
        %30!= block(noreturn, {
          %152 = bitcast([]u8, %29!)
          %153!= br(%4, %152!)
        })
      }, poi {
        %31!= br(%6, @Air.Inst.Ref.void_value)
      })
    })
    %33!= dbg_stmt(14:32)
    %35 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
    %36!= dbg_stmt(16:22)
    %37 = struct_field_val(%35!, 0)
    %38 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
    %39!= dbg_stmt(16:39)
    %40 = struct_field_val(%38!, 1)
    %41!= dbg_stmt(16:28)
    %42 = add(%37!, %40!)
    %43!= dbg_stmt(16:50)
    %44 = sub(%42!, @Air.Inst.Ref.one_usize)
    %45!= dbg_stmt(17:41)
    %34 = dbg_inline_block(usize, <fn (?[*]u8, usize, usize, os.linux.MAP__struct_2035, i32, i64) callconv(.@"inline") usize, (function 'mmap')>, {
      %46!= dbg_arg_inline(<?[*]u8, null>, "address")
      %47!= dbg_arg_inline(%44, "length")
      %48!= dbg_arg_inline(<usize, 3>, "prot")
      %49!= dbg_arg_inline(<os.linux.MAP__struct_2035, .{ .TYPE = .PRIVATE, .FIXED = false, .ANONYMOUS = true, .@"32BIT" = false, ._7 = 0, .GROWSDOWN = false, ._9 = 0, .DENYWRITE = false, .EXECUTABLE = false, .LOCKED = false, .NORESERVE = false, .POPULATE = false, .NONBLOCK = false, .STACK = false, .HUGETLB = false, .SYNC = false, .FIXED_NOREPLACE = false, ._21 = 0, .UNINITIALIZED = false, .@"_" = 0 }>, "flags")
      %50!= dbg_arg_inline(<i32, -1>, "fd")
      %51!= dbg_arg_inline(<i64, 0>, "offset")
      %52!= dbg_stmt(2:9)
      %55!= dbg_stmt(15:20)
      %57!= dbg_stmt(27:13)
      %58 = aggregate_init(struct { comptime @Type(.enum_literal) = .mmap, comptime usize = 0, usize, comptime usize = 3, comptime u32 = 34, comptime usize = 18446744073709551615, comptime u64 = 0 }, [<@Type(.enum_literal), .mmap>, @Air.Inst.Ref.zero_usize, %44!, <usize, 3>, <u32, 34>, <usize, 18446744073709551615>, <u64, 0>])
      %59 = struct_field_val(%58!, 2)
      %60 = dbg_inline_block(usize, <fn (os.linux.syscalls.X64, usize, usize, usize, usize, usize, usize) usize, (function 'syscall6')>, {
        %61!= dbg_arg_inline(<os.linux.syscalls.X64, .mmap>, "number")
        %62!= dbg_arg_inline(@Air.Inst.Ref.zero_usize, "arg1")
        %63!= dbg_arg_inline(%59, "arg2")
        %64!= dbg_arg_inline(<usize, 3>, "arg3")
        %65!= dbg_arg_inline(<usize, 34>, "arg4")
        %66!= dbg_arg_inline(<usize, 18446744073709551615>, "arg5")
        %67!= dbg_arg_inline(@Air.Inst.Ref.zero_usize, "arg6")
        %68!= dbg_stmt(10:5)
        %69 = assembly(usize, volatile, [ret] -> ={rax}, [number] in {rax} = (<usize, 9>), [arg1] in {rdi} = (@Air.Inst.Ref.zero_usize), [arg2] in {rsi} = (%59!), [arg3] in {rdx} = (<usize, 3>), [arg4] in {r10} = (<usize, 34>), [arg5] in {r8} = (<usize, 18446744073709551615>), [arg6] in {r9} = (@Air.Inst.Ref.zero_usize), ~{rcx}, ~{r11}, ~{memory}, "syscall")
        %70!= dbg_stmt(10:5)
        %71!= br(%60, %69!)
      } %59!)
      %73!= dbg_stmt(15:9)
      %74!= br(%34, %60!)
    } %44!)
    %75!= dbg_var_val(%34, "begin_addr")
    %76!= dbg_stmt(22:13)
    %77!= block(void, {
      %78 = bitcast(isize, %34)
      %79 = bitcast(i64, %78!)
      %80 = cmp_lt(%79!, <i64, 0>)
      %84!= cond_br(%80!, poi {
        %34!
        %81!= dbg_stmt(22:51)
        %82!= trap()
      }, poi {
        %83!= br(%77, @Air.Inst.Ref.void_value)
      })
    })
    %85!= dbg_stmt(24:54)
    %87 = bitcast([*]align(4096) u8, %34)
    %88 = alloc(*[*]align(4096) u8)
    %89!= store(%88, %87)
    %90 = bitcast(*const [*]align(4096) u8, %88!)
    %91!= dbg_var_val(%87!, "area_ptr")
    %92!= dbg_stmt(27:48)
    %94 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
    %95!= dbg_stmt(27:70)
    %96 = struct_field_val(%94!, 1)
    %93 = dbg_inline_block(usize, <fn (usize, usize) callconv(.@"inline") usize, (function 'alignForward')>, {
      %97!= dbg_arg_inline(%34, "addr")
      %98!= dbg_arg_inline(%96, "alignment")
      %99!= dbg_stmt(2:44)
      %101 = sub_with_overflow(struct { usize, u1 }, %96, @Air.Inst.Ref.one_usize)
      %102 = struct_field_val(%101, 1)
      %103 = cmp_eq(%102!, <u1, 0>)
      %106!= block(void, {
        %107!= cond_br(%103!, likely {
          %108!= br(%106, @Air.Inst.Ref.void_value)
        }, cold {
          %90! %34! %101! %96!
          %104!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
          %105!= unreach()
        })
      } %103!)
      %109 = struct_field_val(%101!, 0)
      %110!= dbg_stmt(2:31)
      %111 = add_with_overflow(struct { usize, u1 }, %34, %109!)
      %112 = struct_field_val(%111, 1)
      %113 = cmp_eq(%112!, <u1, 0>)
      %116!= block(void, {
        %117!= cond_br(%113!, likely {
          %118!= br(%116, @Air.Inst.Ref.void_value)
        }, cold {
          %90! %96! %111! %34!
          %114!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
          %115!= unreach()
        })
      } %113!)
      %119 = struct_field_val(%111!, 0)
      %100 = dbg_inline_block(usize, <fn (usize, usize) callconv(.@"inline") usize, (function 'alignBackward')>, {
        %120!= dbg_arg_inline(%119, "addr")
        %121!= dbg_arg_inline(%96, "alignment")
        %122!= dbg_stmt(2:31)
        %123 = sub_with_overflow(struct { usize, u1 }, %96!, @Air.Inst.Ref.one_usize)
        %124 = struct_field_val(%123, 1)
        %125 = cmp_eq(%124!, <u1, 0>)
        %128!= block(void, {
          %129!= cond_br(%125!, likely {
            %130!= br(%128, @Air.Inst.Ref.void_value)
          }, cold {
            %90! %34! %123! %119!
            %126!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
            %127!= unreach()
          })
        } %125!)
        %131 = struct_field_val(%123!, 0)
        %132 = not(usize, %131!)
        %133 = bit_and(%119!, %132!)
        %134!= dbg_stmt(2:5)
        %135!= br(%100, %133!)
      } %96! %119!)
      %136!= dbg_stmt(2:5)
      %137!= br(%93, %100!)
    } %96!)
    %138!= dbg_var_val(%93, "begin_aligned_addr")
    %139!= dbg_stmt(28:42)
    %140 = sub(%93!, %34!)
    %141!= dbg_var_val(%140, "start")
    %142!= dbg_stmt(29:9)
    %143 = load(os.linux.tls.AreaDesc, <*os.linux.tls.AreaDesc, os.linux.tls.area_desc>)
    %144!= dbg_stmt(29:50)
    %145 = struct_field_val(%143!, 0)
    %146!= dbg_stmt(29:37)
    %147 = load([*]align(4096) u8, %90!)
    %148 = ptr_add([*]u8, %147!, %140!)
    %149!= add(%140, %145)
    %150 = slice([]u8, %148!, %145!)
    %151!= br(%4, %150!)
  })
  %154!= dbg_var_val(%4, "area")
  %155!= dbg_stmt(32:33)
  %156 = call(<fn ([]u8) usize, (function 'prepareArea')>, [%4!])
  %157!= dbg_var_val(%156, "tp_value")
  %158!= dbg_stmt(33:21)
  %159!= call(<fn (usize) void, (function 'setThreadPointer')>, [%156!])
  %160!= ret(@Air.Inst.Ref.void_value)
# End Function AIR: os.linux.tls.initStatic