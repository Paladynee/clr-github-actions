# Begin Function AIR: start.expandStackSize:
# Total AIR+Liveness bytes: 1.8017578125KiB
# AIR Instructions:         89 (801B)
# AIR Extra Data:           154 (616B)
# Liveness tomb_bits:       48B
# Liveness Extra Data:      43 (172B)
# Liveness special table:   13 (104B)
  %0 = arg([]elf.Elf64_Phdr, "phdrs")
  %1 = alloc(*usize)
  %2!= store_safe(%1, @Air.Inst.Ref.zero_usize)
  %3!= dbg_stmt(2:10)
  %4 = slice_len(usize, %0)
  %5!= block(void, {
    %6!= loop(noreturn, {
      %7 = load(usize, %1)
      %8!= block(void, {
        %9 = bitcast(u64, %7)
        %10 = bitcast(u64, %4)
        %11 = cmp_lt(%9!, %10!)
        %84!= cond_br(%11!, poi {
          %12 = slice_elem_ptr(*elf.Elf64_Phdr, %0, %7)
          %13!= dbg_var_val(%12, "phdr")
          %14!= dbg_stmt(3:21)
          %15 = struct_field_ptr_index_0(*align(8) u32, %12)
          %16 = load(u32, %15!)
          %17!= dbg_stmt(3:17)
          %19!= block(void, {
            %79!= switch_br(%16!, [<u32, 1685382481>] => {
                %4! %7! %1! %0!
                %20!= dbg_stmt(5:21)
                %21!= block(void, {
                  %22!= dbg_stmt(5:25)
                  %23 = struct_field_ptr(%12, 6)
                  %24 = load(u64, %23!)
                  %25 = cmp_eq(%24!, <u64, 0>)
                  %28!= cond_br(%25!, poi {
                    %12!
                    %26!= br(%5, @Air.Inst.Ref.void_value)
                  }, poi {
                    %27!= br(%21, @Air.Inst.Ref.void_value)
                  })
                })
                %29!= dbg_stmt(6:28)
                %30 = struct_field_ptr(%12, 6)
                %31 = load(u64, %30!)
                %32!= dbg_stmt(6:37)
                %33 = rem(%31!, <u64, 4096>)
                %34 = cmp_eq(%33!, <u64, 0>)
                %35!= dbg_stmt(6:23)
                %36!= call(<fn (bool) void, (function 'assert')>, [%34!])
                %37!= dbg_stmt(9:17)
                %38 = block(os.linux.rlimit, {
                  %39!= dbg_stmt(9:51)
                  %40 = call(<fn (os.linux.rlimit_resource__enum_2617) error{Unexpected}!os.linux.rlimit, (function 'getrlimit')>, [<os.linux.rlimit_resource__enum_2617, .STACK>])
                  %41 = is_non_err(%40)
                  %46!= cond_br(%41!, poi {
                    %42 = unwrap_errunion_payload(os.linux.rlimit, %40!)
                    %43!= br(%38, %42!)
                  }, poi {
                    %12! %40!
                    %44!= unwrap_errunion_err(error{Unexpected}, %40)
                    %45!= br(%5, @Air.Inst.Ref.void_value)
                  })
                })
                %47!= dbg_var_val(%38, "limits")
                %48!= dbg_stmt(12:52)
                %49 = struct_field_ptr(%12!, 6)
                %50 = load(u64, %49!)
                %51!= dbg_stmt(12:68)
                %52 = struct_field_val(%38, 1)
                %53 = min(%50!, %52!)
                %54!= dbg_var_val(%53, "wanted_stack_size")
                %55!= dbg_stmt(14:21)
                %56!= block(void, {
                  %57!= dbg_stmt(14:47)
                  %58 = struct_field_val(%38, 0)
                  %59 = cmp_gt(%53, %58!)
                  %75!= cond_br(%59!, poi {
                    %60!= dbg_stmt(15:21)
                    %61!= block(void, {
                      %62!= dbg_stmt(17:38)
                      %63 = struct_field_val(%38!, 1)
                      %64 = aggregate_init(os.linux.rlimit, [%53!, %63!])
                      %65!= dbg_stmt(15:40)
                      %66 = call(<fn (os.linux.rlimit_resource__enum_2617, os.linux.rlimit) error{Unexpected,PermissionDenied,LimitTooBig}!void, (function 'setrlimit')>, [<os.linux.rlimit_resource__enum_2617, .STACK>, %64!])
                      %67 = is_non_err(%66)
                      %72!= cond_br(%67!, poi {
                        %68 = unwrap_errunion_payload(void, %66!)
                        %69!= br(%61, %68!)
                      }, poi {
                        %66!
                        %70!= unwrap_errunion_err(error{Unexpected,PermissionDenied,LimitTooBig}, %66)
                        %71!= br(%61, @Air.Inst.Ref.void_value)
                      })
                    } %38! %53!)
                    %73!= br(%56, @Air.Inst.Ref.void_value)
                  }, poi {
                    %38! %53!
                    %74!= br(%56, @Air.Inst.Ref.void_value)
                  })
                } %38! %53!)
                %76!= dbg_stmt(29:17)
                %77!= br(%5, @Air.Inst.Ref.void_value)
              }, else => {
                %12!
                %78!= br(%19, @Air.Inst.Ref.void_value)
              }
            )
          } %12! %16!)
          %80!= dbg_stmt(33:5)
          %81!= dbg_empty_stmt()
          %82!= br(%8, @Air.Inst.Ref.void_value)
        }, poi {
          %4! %7! %1! %0!
          %83!= br(%5, @Air.Inst.Ref.void_value)
        })
      })
      %85 = add(%7!, @Air.Inst.Ref.one_usize)
      %86!= store_safe(%1, %85!)
      %87!= repeat(%6)
    })
  } %4! %1! %0!)
  %88!= ret_safe(@Air.Inst.Ref.void_value)
# End Function AIR: start.expandStackSize