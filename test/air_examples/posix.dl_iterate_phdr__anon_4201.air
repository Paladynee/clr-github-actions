# Begin Function AIR: posix.dl_iterate_phdr__anon_4201:
# Total AIR+Liveness bytes: 7.208984375KiB
# AIR Instructions:         346 (3.041015625KiB)
# AIR Extra Data:           610 (2.3828125KiB)
# Liveness tomb_bits:       176B
# Liveness Extra Data:      249 (996B)
# Liveness special table:   69 (552B)
  %0 = arg(*debug.SelfInfo.lookupModuleDl__struct_4062, "context")
  %1!= dbg_stmt(15:9)
  %5!= dbg_stmt(28:48)
  %7 = call(<fn () usize, (function 'getBaseAddress')>, [])
  %8!= dbg_var_val(%7, "elf_base")
  %9!= dbg_stmt(29:29)
  %11 = cmp_neq(%7, @Air.Inst.Ref.zero_usize)
  %14!= block(void, {
    %15!= cond_br(%11!, likely {
      %16!= br(%14, @Air.Inst.Ref.void_value)
    }, cold {
      %0! %7!
      %12!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "cast causes pointer to be null"[0..30]>, <?*const builtin.StackTrace, null>, <?usize, null>])
      %13!= unreach()
    })
  } %11!)
  %17 = bit_and(%7, <usize, 7>)
  %18 = cmp_eq(%17!, @Air.Inst.Ref.zero_usize)
  %21!= block(void, {
    %22!= cond_br(%18!, likely {
      %23!= br(%21, @Air.Inst.Ref.void_value)
    }, cold {
      %0! %7!
      %19!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "incorrect alignment"[0..19]>, <?*const builtin.StackTrace, null>, <?usize, null>])
      %20!= unreach()
    })
  } %18!)
  %24 = bitcast(*elf.Elf64_Ehdr, %7)
  %25 = alloc(**elf.Elf64_Ehdr)
  %26!= store_safe(%25, %24)
  %27 = bitcast(*const *elf.Elf64_Ehdr, %25!)
  %28!= dbg_var_val(%24, "ehdr")
  %29!= dbg_stmt(31:28)
  %30 = load(*elf.Elf64_Ehdr, %27!)
  %31 = struct_field_ptr_index_0(*align(8) [16]u8, %30!)
  %32!= dbg_stmt(31:36)
  %33 = bitcast([*]align(8) u8, %31!)
  %34 = ptr_add([*]align(8) u8, %33!, @Air.Inst.Ref.zero_usize)
  %35 = bitcast(*align(8) [4]u8, %34!)
  %36 = cmp_lte(<usize, 4>, <usize, 16>)
  %39!= block(void, {
    %40!= cond_br(%36!, likely {
      %41!= br(%39, @Air.Inst.Ref.void_value)
    }, cold {
      %24! %7! %35! %0!
      %37!= call(<fn (usize, usize) noreturn, (function 'outOfBounds')>, [<usize, 4>, <usize, 16>])
      %38!= unreach()
    })
  } %36!)
  %42 = array_to_slice([]const u8, %35!)
  %43!= dbg_stmt(31:19)
  %44 = call(<fn ([]const u8, []const u8) bool, (function 'eql__anon_4196')>, [%42!, <[]const u8, "\x7fELF"[0..4]>])
  %45!= dbg_stmt(31:11)
  %46!= call(<fn (bool) void, (function 'assert')>, [%44!])
  %47!= dbg_stmt(32:24)
  %48 = struct_field_ptr(%24, 10)
  %49 = load(u16, %48!)
  %50!= dbg_var_val(%49, "n_phdr")
  %51!= dbg_stmt(33:64)
  %53 = struct_field_ptr(%24, 5)
  %54 = load(u64, %53!)
  %55!= dbg_stmt(33:58)
  %56 = bitcast(usize, %54!)
  %57 = add_with_overflow(struct { usize, u1 }, %7, %56!)
  %58 = struct_field_val(%57, 1)
  %59 = cmp_eq(%58!, <u1, 0>)
  %62!= block(void, {
    %63!= cond_br(%59!, likely {
      %64!= br(%62, @Air.Inst.Ref.void_value)
    }, cold {
      %24! %7! %57! %0! %49!
      %60!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
      %61!= unreach()
    })
  } %59!)
  %65 = struct_field_val(%57!, 0)
  %66!= dbg_stmt(33:37)
  %67 = cmp_neq(%65, @Air.Inst.Ref.zero_usize)
  %70!= block(void, {
    %71!= cond_br(%67!, likely {
      %72!= br(%70, @Air.Inst.Ref.void_value)
    }, cold {
      %65! %24! %7! %0! %49!
      %68!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "cast causes pointer to be null"[0..30]>, <?*const builtin.StackTrace, null>, <?usize, null>])
      %69!= unreach()
    })
  } %67!)
  %73 = bit_and(%65, <usize, 7>)
  %74 = cmp_eq(%73!, @Air.Inst.Ref.zero_usize)
  %77!= block(void, {
    %78!= cond_br(%74!, likely {
      %79!= br(%77, @Air.Inst.Ref.void_value)
    }, cold {
      %65! %24! %7! %0! %49!
      %75!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "incorrect alignment"[0..19]>, <?*const builtin.StackTrace, null>, <?usize, null>])
      %76!= unreach()
    })
  } %74!)
  %80 = bitcast([*]elf.Elf64_Phdr, %65!)
  %81 = alloc(*[*]elf.Elf64_Phdr)
  %82!= store_safe(%81, %80!)
  %83 = bitcast(*const [*]elf.Elf64_Phdr, %81!)
  %84!= dbg_stmt(33:75)
  %85 = load([*]elf.Elf64_Phdr, %83!)
  %86 = ptr_add([*]elf.Elf64_Phdr, %85!, @Air.Inst.Ref.zero_usize)
  %87 = intcast(usize, %49!)
  %88 = cmp_lte(@Air.Inst.Ref.zero_usize, %87)
  %91!= block(void, {
    %92!= cond_br(%88!, likely {
      %93!= br(%91, @Air.Inst.Ref.void_value)
    }, cold {
      %24! %7! %86! %0!
      %89!= call(<fn (usize, usize) noreturn, (function 'startGreaterThanEnd')>, [@Air.Inst.Ref.zero_usize, %87!])
      %90!= unreach()
    })
  } %88!)
  %94 = cmp_lte(@Air.Inst.Ref.zero_usize, %87)
  %97!= block(void, {
    %98!= cond_br(%94!, likely {
      %99!= br(%97, @Air.Inst.Ref.void_value)
    }, cold {
      %24! %7! %86! %0!
      %95!= call(<fn (usize, usize) noreturn, (function 'outOfBounds')>, [@Air.Inst.Ref.zero_usize, %87!])
      %96!= unreach()
    })
  } %94!)
  %100 = slice([]elf.Elf64_Phdr, %86!, %87!)
  %101!= dbg_var_val(%100, "phdrs")
  %102!= dbg_stmt(35:5)
  %103 = alloc(*dynamic_library.LinkMap.Iterator)
  %104 = block(dynamic_library.LinkMap.Iterator, {
    %105!= dbg_stmt(35:33)
    %106 = call(<fn ([]elf.Elf64_Phdr) error{InvalidExe}!dynamic_library.LinkMap.Iterator, (function 'linkmap_iterator')>, [%100])
    %107 = is_non_err(%106)
    %115!= cond_br(%107!, poi {
      %108 = unwrap_errunion_payload(dynamic_library.LinkMap.Iterator, %106!)
      %109!= br(%104, %108!)
    }, unlikely poi {
      %103! %24! %7! %0! %100!
      %110 = unwrap_errunion_err(error{InvalidExe}, %106!)
      %111!= dbg_stmt(35:47)
      %112 = bitcast(anyerror, %110!)
      %113!= call(<fn (?*builtin.StackTrace, anyerror) noreturn, (function 'unwrapError')>, [<?*builtin.StackTrace, null>, %112!])
      %114!= unreach()
    })
  })
  %116!= store(%103, %104!)
  %118!= dbg_var_ptr(%103, "it")
  %119!= dbg_stmt(39:9)
  %120!= block(void, {
    %121!= dbg_stmt(39:15)
    %122 = call(<fn (*dynamic_library.LinkMap.Iterator) bool, (function 'end')>, [%103])
    %194!= cond_br(%122!, poi {
      %103! %7!
      %123!= dbg_stmt(42:9)
      %124 = alloc(*usize)
      %125!= store_safe(%124, @Air.Inst.Ref.zero_usize)
      %126!= dbg_stmt(42:35)
      %127 = slice_len(usize, %100)
      %128 = block(usize, {
        %129!= loop(noreturn, {
          %130 = load(usize, %124)
          %131!= block(void, {
            %132 = bitcast(u64, %130)
            %133 = bitcast(u64, %127)
            %134 = cmp_lt(%132!, %133!)
            %171!= cond_br(%134!, poi {
              %135 = slice_elem_ptr(*elf.Elf64_Phdr, %100, %130)
              %136!= dbg_var_val(%135, "phdr")
              %137!= dbg_stmt(43:17)
              %138!= block(void, {
                %139!= dbg_stmt(43:21)
                %140 = struct_field_ptr_index_0(*align(8) u32, %135)
                %141 = load(u32, %140!)
                %142!= dbg_stmt(43:35)
                %143 = cmp_eq(%141!, <u32, 6>)
                %164!= cond_br(%143!, poi {
                  %127! %124! %130!
                  %144!= dbg_stmt(44:40)
                  %145 = slice_ptr([*]elf.Elf64_Phdr, %100)
                  %146!= dbg_stmt(44:23)
                  %147 = int_from_ptr(%145!)
                  %148!= dbg_stmt(44:52)
                  %149 = struct_field_ptr_index_3(*u64, %135!)
                  %150 = load(u64, %149!)
                  %151!= dbg_stmt(44:46)
                  %152 = bitcast(usize, %150!)
                  %153 = sub_with_overflow(struct { usize, u1 }, %147!, %152!)
                  %154 = struct_field_val(%153, 1)
                  %155 = cmp_eq(%154!, <u1, 0>)
                  %158!= block(void, {
                    %159!= cond_br(%155!, likely {
                      %160!= br(%158, @Air.Inst.Ref.void_value)
                    }, cold {
                      %24! %0! %153! %100!
                      %156!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                      %157!= unreach()
                    })
                  } %155!)
                  %161 = struct_field_val(%153!, 0)
                  %162!= br(%128, %161!)
                }, poi {
                  %135!
                  %163!= br(%138, @Air.Inst.Ref.void_value)
                })
              } %135!)
              %165!= dbg_stmt(49:9)
              %166!= dbg_empty_stmt()
              %167!= br(%131, @Air.Inst.Ref.void_value)
            }, cold poi {
              %130! %0! %127! %124! %24! %100!
              %168!= dbg_stmt(49:16)
              %169!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "reached unreachable code"[0..24]>, <?*const builtin.StackTrace, null>, <?usize, null>])
              %170!= unreach()
            })
          })
          %172 = add(%130!, @Air.Inst.Ref.one_usize)
          %173!= store_safe(%124, %172!)
          %174!= repeat(%129)
        })
      } %127! %124!)
      %175!= dbg_var_val(%128, "base_address")
      %176!= dbg_stmt(51:9)
      %177 = alloc(*os.linux.dl_phdr_info)
      %179!= dbg_stmt(54:26)
      %180 = slice_ptr([*]elf.Elf64_Phdr, %100!)
      %181!= dbg_stmt(55:26)
      %182 = struct_field_ptr(%24!, 10)
      %183 = load(u16, %182!)
      %184 = aggregate_init(os.linux.dl_phdr_info, [%128!, <?[*:0]const u8, "/proc/self/exe">, %180!, %183!])
      %185!= store(%177, %184!)
      %187!= dbg_var_ptr(%177, "info")
      %188!= dbg_stmt(58:24)
      %190 = call(<fn (*os.linux.dl_phdr_info, usize, *debug.SelfInfo.lookupModuleDl__struct_4062) error{Found}!void, (function 'callback')>, [%177!, <usize, 32>, %0!])
      %191!= dbg_stmt(58:9)
      %192!= ret_safe(%190!)
    }, poi {
      %100!
      %193!= br(%120, @Air.Inst.Ref.void_value)
    })
  } %100!)
  %195!= block(void, {
    %196!= loop(noreturn, {
      %197!= block(void, {
        %198!= dbg_stmt(62:19)
        %199 = call(<fn (*dynamic_library.LinkMap.Iterator) ?*dynamic_library.LinkMap, (function 'next')>, [%103])
        %200 = is_non_null(%199)
        %343!= cond_br(%200!, poi {
          %201 = optional_payload(*dynamic_library.LinkMap, %199!)
          %202!= dbg_var_val(%201, "entry")
          %203!= block(void, {
            %204!= dbg_stmt(63:9)
            %206 = alloc(*[*]elf.Elf64_Phdr)
            %207!= store_safe(%206, <[*]elf.Elf64_Phdr, undefined>)
            %208!= dbg_var_ptr(%206, "phdr")
            %209!= dbg_stmt(64:9)
            %210 = alloc(*u16)
            %211!= store_safe(%210, <u16, undefined>)
            %212!= dbg_var_ptr(%210, "phnum")
            %213!= dbg_stmt(66:13)
            %214!= block(void, {
              %215!= dbg_stmt(66:18)
              %216 = struct_field_ptr_index_0(*usize, %201)
              %217 = load(usize, %216!)
              %218 = bitcast(u64, %217!)
              %219 = cmp_neq(%218!, <u64, 0>)
              %313!= cond_br(%219!, poi {
                %220!= dbg_stmt(67:60)
                %222 = struct_field_ptr_index_0(*usize, %201)
                %223 = load(usize, %222!)
                %224!= dbg_stmt(67:43)
                %225 = cmp_neq(%223, @Air.Inst.Ref.zero_usize)
                %228!= block(void, {
                  %229!= cond_br(%225!, likely {
                    %230!= br(%228, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %0! %201! %24! %223! %206!
                    %226!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "cast causes pointer to be null"[0..30]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %227!= unreach()
                  })
                } %225!)
                %231 = bit_and(%223, <usize, 7>)
                %232 = cmp_eq(%231!, @Air.Inst.Ref.zero_usize)
                %235!= block(void, {
                  %236!= cond_br(%232!, likely {
                    %237!= br(%235, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %0! %201! %24! %223! %206!
                    %233!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "incorrect alignment"[0..19]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %234!= unreach()
                  })
                } %232!)
                %238 = bitcast(*elf.Elf64_Ehdr, %223!)
                %239!= dbg_var_val(%238, "elf_header")
                %240!= dbg_stmt(68:37)
                %241 = struct_field_ptr_index_0(*usize, %201)
                %242 = load(usize, %241!)
                %243!= dbg_stmt(68:57)
                %244 = struct_field_ptr(%238, 5)
                %245 = load(u64, %244!)
                %246!= dbg_stmt(68:45)
                %247 = bitcast(usize, %245!)
                %248 = add_with_overflow(struct { usize, u1 }, %242!, %247!)
                %249 = struct_field_val(%248, 1)
                %250 = cmp_eq(%249!, <u1, 0>)
                %253!= block(void, {
                  %254!= cond_br(%250!, likely {
                    %255!= br(%253, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %238! %0! %201! %24! %248! %206!
                    %251!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %252!= unreach()
                  })
                } %250!)
                %256 = struct_field_val(%248!, 0)
                %257!= dbg_stmt(68:20)
                %258 = cmp_neq(%256, @Air.Inst.Ref.zero_usize)
                %261!= block(void, {
                  %262!= cond_br(%258!, likely {
                    %263!= br(%261, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %238! %0! %201! %24! %256! %206!
                    %259!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "cast causes pointer to be null"[0..30]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %260!= unreach()
                  })
                } %258!)
                %264 = bit_and(%256, <usize, 7>)
                %265 = cmp_eq(%264!, @Air.Inst.Ref.zero_usize)
                %268!= block(void, {
                  %269!= cond_br(%265!, likely {
                    %270!= br(%268, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %238! %0! %201! %24! %256! %206!
                    %266!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "incorrect alignment"[0..19]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %267!= unreach()
                  })
                } %265!)
                %271 = bitcast([*]elf.Elf64_Phdr, %256!)
                %272!= store_safe(%206, %271!)
                %273!= dbg_stmt(69:31)
                %274 = struct_field_ptr(%238!, 10)
                %275 = load(u16, %274!)
                %276!= store_safe(%210, %275!)
                %277!= br(%214, @Air.Inst.Ref.void_value)
              }, poi {
                %278!= dbg_stmt(72:47)
                %279 = struct_field_ptr(%24, 5)
                %280 = load(u64, %279!)
                %281!= dbg_stmt(72:41)
                %282 = bitcast(usize, %280!)
                %283 = add_with_overflow(struct { usize, u1 }, %7, %282!)
                %284 = struct_field_val(%283, 1)
                %285 = cmp_eq(%284!, <u1, 0>)
                %288!= block(void, {
                  %289!= cond_br(%285!, likely {
                    %290!= br(%288, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %0! %201! %24! %206! %283!
                    %286!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "integer overflow"[0..16]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %287!= unreach()
                  })
                } %285!)
                %291 = struct_field_val(%283!, 0)
                %292!= dbg_stmt(72:20)
                %293 = cmp_neq(%291, @Air.Inst.Ref.zero_usize)
                %296!= block(void, {
                  %297!= cond_br(%293!, likely {
                    %298!= br(%296, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %291! %0! %201! %24! %206!
                    %294!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "cast causes pointer to be null"[0..30]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %295!= unreach()
                  })
                } %293!)
                %299 = bit_and(%291, <usize, 7>)
                %300 = cmp_eq(%299!, @Air.Inst.Ref.zero_usize)
                %303!= block(void, {
                  %304!= cond_br(%300!, likely {
                    %305!= br(%303, @Air.Inst.Ref.void_value)
                  }, cold {
                    %103! %210! %7! %291! %0! %201! %24! %206!
                    %301!= call(<fn ([]const u8, ?*const builtin.StackTrace, ?usize) noreturn, (function 'defaultPanic')>, [<[]const u8, "incorrect alignment"[0..19]>, <?*const builtin.StackTrace, null>, <?usize, null>])
                    %302!= unreach()
                  })
                } %300!)
                %306 = bitcast([*]elf.Elf64_Phdr, %291!)
                %307!= store_safe(%206, %306!)
                %308!= dbg_stmt(73:25)
                %309 = struct_field_ptr(%24, 10)
                %310 = load(u16, %309!)
                %311!= store_safe(%210, %310!)
                %312!= br(%214, @Air.Inst.Ref.void_value)
              })
            })
            %314!= dbg_stmt(76:9)
            %315 = alloc(*os.linux.dl_phdr_info)
            %317!= dbg_stmt(77:26)
            %318 = struct_field_ptr_index_0(*usize, %201)
            %319 = load(usize, %318!)
            %320!= dbg_stmt(78:26)
            %321 = struct_field_ptr_index_1(*[*:0]const u8, %201!)
            %322 = load([*:0]const u8, %321!)
            %323 = load([*]elf.Elf64_Phdr, %206!)
            %324 = load(u16, %210!)
            %325 = bitcast(?[*:0]const u8, %322!)
            %326 = aggregate_init(os.linux.dl_phdr_info, [%319!, %325!, %323!, %324!])
            %327!= store(%315, %326!)
            %329!= dbg_var_ptr(%315, "info")
            %330!= dbg_stmt(83:21)
            %332 = call(<fn (*os.linux.dl_phdr_info, usize, *debug.SelfInfo.lookupModuleDl__struct_4062) error{Found}!void, (function 'callback')>, [%315!, <usize, 32>, %0])
            %337!= try(%332, {
              %103! %24! %7! %0!
              %333 = unwrap_errunion_err(error{Found}, %332!)
              %334!= dbg_stmt(83:9)
              %335 = wrap_errunion_err(error{Found}!void, %333!)
              %336!= ret_safe(%335!)
            } %332!)
            %338!= dbg_stmt(84:5)
            %339!= dbg_empty_stmt()
            %340!= br(%203, @Air.Inst.Ref.void_value)
          } %201!)
          %341!= br(%197, @Air.Inst.Ref.void_value)
        }, poi {
          %103! %199! %7! %0! %24!
          %342!= br(%195, @Air.Inst.Ref.void_value)
        })
      })
      %344!= repeat(%196)
    })
  } %103! %7! %0! %24!)
  %345!= ret_safe(<error{Found}!void, {}>)
# End Function AIR: posix.dl_iterate_phdr__anon_4201